--Rabbit and Wolf
MODULE main
VAR

RbA : 0..5;
RbB : 0..5;
RbS : 0..3;

WoA : 0..5;
WoB : 0..5;
WoS : 0..3;

RbSM : 0..3;
WoSM : 0..3;

Splace : {0, bankA, AtoB, bankB, BtoA};


ASSIGN
init(RbA) := 5;
init(RbB) := 0;
init(RbS) := 0;
init(WoA) := 5;
init(WoB) := 0;
init(WoS) := 0;

init(RbSM) := 0;
init(WoSM) := 0;
init(Splace):=0;

next(Splace):=case
                Splace = 0 :bankA;
                Splace = bankA : AtoB;
                Splace = AtoB : bankB;
                Splace = bankB : BtoA;
                Splace = BtoA : bankA;
            esac;


next(RbSM):={0,1,2,3};
next(WoSM):={0,1,2,3};

next(RbA):=case
            Splace = bankA & RbA - RbSM >= 0 : RbA - RbSM;
            Splace = BtoA & RbA + RbS <= 5 : RbA + RbS;
            TRUE : RbA;
            esac;

next(WoA):=case
            Splace = bankA & WoA - WoSM >= 0 : WoA - WoSM;
            Splace = BtoA & WoA + WoS <= 5 : WoA + WoS;
            TRUE :WoA;
            esac;

next(RbB):=case
            Splace = bankB & RbB - RbSM >= 0 : RbB - RbSM;
            Splace = AtoB & RbB + RbS <= 5 : RbB + RbS;
            TRUE : RbB;
            esac;

next(WoB):=case
            Splace = bankB & WoB - WoSM >= 0 : WoB - WoSM;
            Splace = AtoB & WoB + WoS <= 5 : WoB + WoS;
            TRUE : WoB;
            esac;

next(RbS):=case
            Splace = bankA : RbSM;
            Splace = AtoB : 0;
            Splace = bankB : RbSM;
            Splace = BtoA : 0;
            TRUE : RbS;
            esac;

next(WoS):=case
            Splace = bankA : WoSM;
            Splace = AtoB : 0;
            Splace = bankB : WoSM;
            Splace = BtoA : 0;
            TRUE : WoS;
            esac;
           


DEFINE
    goal := RbB = 5 & WoB = 5;

    safe := ((RbA >= WoA) | (RbA = 0)) & ((RbB >= WoB) | (RbB = 0)) & ((RbS >= WoS) | (RbS = 0));
    crew := !(Splace=AtoB | Splace=BtoA) | (RbS+WoS=1 | RbS+WoS=2 | RbS+WoS=3);
    a_ok := (Splace=bankA -> (RbA>=RbSM)&(WoA>=WoSM));
    b_ok := (Splace=bankB -> (RbB>=RbSM)&(WoB>=WoSM));
    rule := safe & crew & a_ok & b_ok;

LTLSPEC !(rule U goal)
